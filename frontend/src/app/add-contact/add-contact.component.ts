import {Component, ElementRef, OnInit, ViewChild} from '@angular/core';
import {Model} from "../model";
import {ActivatedRoute, Params} from '@angular/router';
import {HttpClient} from "@angular/common/http";
import {Format} from "./format";
import imageCompression from 'browser-image-compression'
@Component({
  selector: 'app-add-contact',
  templateUrl: './add-contact.component.html',
  styleUrls: ['./add-contact.component.css']
})
export class AddContactComponent implements OnInit{

  constructor(private http: HttpClient) { }

  image = "data:image/png;base64, "

  name = "Unknown Name"
  job = "Unknown Job"
  items: Model[] = []

  favorites = false;

  id = window.location.pathname.split("/")[2];

  openFile() {
    let yourElem= <HTMLElement>document.querySelector('#inputValue');
    yourElem.click();
  }


  async onUploadFile(event: any) {

    var options = {
      maxSizeMB: 2,
      maxWidthOrHeight: 512,
      useWebWorker: true
    }
    const output : File = await imageCompression(event.target.files[0], options)

    var fileReader = new FileReader();
    fileReader.onload = function (event) {
      if (event.target != null) {
        var uri = event.target.result;
        let yourElem= <HTMLElement>document.querySelector('#imageBase64');
        if (typeof uri === "string") {
          yourElem.setAttribute("src", uri);

        }

      }
    };

    fileReader.readAsDataURL(output);


  }

  onChangeName() {
   let name = window.prompt('New Name', 'Unknown Name');
    let yourElem= <HTMLElement>document.querySelector('#changeName');
    yourElem.textContent = name;
  }

  onChangeJob() {
    let name = window.prompt('New Job', 'Unknown Job');
    let yourElem= <HTMLElement>document.querySelector('#changeJob');
    yourElem.textContent = name;
  }

  addItem() {
    let type = window.prompt('Type', '');
    let icon = "fa-" + type;
    let value = window.prompt('Value', '');

    if (type != null && icon != null && value != null) {
      this.items.push({type: type, value: value, icon: icon});
    }
  }

  delete(id: string) {
    this.http.get("http://localhost:3000/api/deletedata?_id=" + this.id).subscribe(res => {

      window.location.href = '/';
      console.log(res)

    }, err => {
      console.log(err)

    });
  }

  save() {
    let image = <HTMLElement>document.querySelector('#imageBase64');
    let name= <HTMLElement>document.querySelector('#changeName');
    let job= <HTMLElement>document.querySelector('#changeJob');
    //console.log(JSON.stringify(this.items))

    if (name.textContent != null && job.textContent != null && image.getAttribute("src") != null && this.items != null) {

      let model: Format = {
        name: name.textContent,
        job: job.textContent,
        photo: image.getAttribute("src"),
        favorite: false,
        items: this.items
      }

      if (this.id != null) {
        this.delete(this.id);
        model.favorite = this.favorites;
      }
      this.http.post("http://localhost:3000/api/insertdata", model).subscribe(res => {


        window.location.href = '/';

      }, err => {
        return 0;
      });

    }
  }

  ngOnInit(): void {

    if (this.id != null) {

      this.http.get("http://localhost:3000/api/find?_id=" + this.id).subscribe(res => {

        this.image = JSON.parse(JSON.stringify(res)).photo;
        this.name = JSON.parse(JSON.stringify(res)).name;
        this.job = JSON.parse(JSON.stringify(res)).job;
        this.items = JSON.parse(JSON.stringify(res)).items;
        this.favorites = JSON.parse(JSON.stringify(res)).favorite;



      }, err => {
        return 0;
      });


    }

  }

  removeFromItem(item : Model) {

    this.items.splice(this.items.indexOf(item), 1);


  }

}
